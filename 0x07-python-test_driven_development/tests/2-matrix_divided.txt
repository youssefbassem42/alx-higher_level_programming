>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Initializing Variable to Use:

>>> matA = [[1, 2, 3],[4, 5, 6]]
>>> matB = [[1, 2, 3],[4, 5, 6], [7, 8, 9]]
>>> none_1 = None
>>> string_list = [["School", 2, 3],[4, "ALX", 6]]
>>> not_same = [1,3,5, [6, 7, 8, 9]]
>>> empty = []
>>> empty_of_lists = [[], [], []]
>>> not_eq = [[1,2,3], [4, 5, 6, 7], [8, 9]]

-------------------------------------------
Pass Test:

>>> print(matrix_divided(matA, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> print(matrix_divided(matB, 4))
[[0.25, 0.5, 0.75], [1.0, 1.25, 1.5], [1.75, 2.0, 2.25]]

========================================
Error Testing:

>>> matrix_divided("School", 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided(matA, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix_divided(matA, "ALX")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided(none_1, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(string_list, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(not_same, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(empty, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(empty_of_lists, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(not_eq, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size


